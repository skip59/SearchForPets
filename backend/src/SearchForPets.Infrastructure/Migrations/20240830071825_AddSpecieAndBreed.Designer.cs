// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SearchForPets.Infrastructure.Postgres.Context;

#nullable disable

namespace SearchForPets.Infrastructure.Postgres.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240830071825_AddSpecieAndBreed")]
    partial class AddSpecieAndBreed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SearchForPets.Domain.Entities.SpeciesContext.BreedEntity.Breed", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("SpecieId")
                        .HasColumnType("uuid")
                        .HasColumnName("specie_id");

                    b.ComplexProperty<Dictionary<string, object>>("Title", "SearchForPets.Domain.Entities.SpeciesContext.BreedEntity.Breed.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(13)
                                .HasColumnType("character varying(13)")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id")
                        .HasName("pk_breed");

                    b.HasIndex("SpecieId")
                        .HasDatabaseName("ix_breed_specie_id");

                    b.ToTable("breed", (string)null);
                });

            modelBuilder.Entity("SearchForPets.Domain.Entities.SpeciesContext.SpeciesEntity.Specie", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.ComplexProperty<Dictionary<string, object>>("Title", "SearchForPets.Domain.Entities.SpeciesContext.SpeciesEntity.Specie.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id")
                        .HasName("pk_specie");

                    b.ToTable("specie", (string)null);
                });

            modelBuilder.Entity("SearchForPets.Domain.Entities.VolunteerContext.PetEntity.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AnimalType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("animal_type");

                    b.Property<DateTime>("AtCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("at_created");

                    b.Property<DateOnly>("BirthDay")
                        .HasColumnType("date")
                        .HasColumnName("birth_day");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("breed");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("color");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("HealthAbout")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("health_about");

                    b.Property<bool>("IsCastrated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_castrated");

                    b.Property<bool>("IsVaccinated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_vaccinated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid?>("VolunteerId")
                        .HasColumnType("uuid")
                        .HasColumnName("volunteer_id");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "SearchForPets.Domain.Entities.VolunteerContext.PetEntity.Pet.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(13)
                                .HasColumnType("character varying(13)")
                                .HasColumnName("city");

                            b1.Property<int>("FlatNumber")
                                .HasMaxLength(6)
                                .HasColumnType("integer")
                                .HasColumnName("flat_number");

                            b1.Property<int>("HouseNumber")
                                .HasMaxLength(6)
                                .HasColumnType("integer")
                                .HasColumnName("house_number");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("character varying(25)")
                                .HasColumnName("street");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("AnthropometricIndicators", "SearchForPets.Domain.Entities.VolunteerContext.PetEntity.Pet.AnthropometricIndicators#AnthropometricIndicators", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("Growth")
                                .HasMaxLength(5)
                                .HasColumnType("double precision")
                                .HasColumnName("growth");

                            b1.Property<double>("Weight")
                                .HasMaxLength(5)
                                .HasColumnType("double precision")
                                .HasColumnName("weight");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Phone", "SearchForPets.Domain.Entities.VolunteerContext.PetEntity.Pet.Phone#PhoneNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(13)
                                .HasColumnType("character varying(13)")
                                .HasColumnName("phone");
                        });

                    b.HasKey("Id")
                        .HasName("pk_pets");

                    b.HasIndex("VolunteerId")
                        .HasDatabaseName("ix_pets_volunteer_id");

                    b.ToTable("pets", (string)null);
                });

            modelBuilder.Entity("SearchForPets.Domain.Entities.VolunteerContext.Volunteer.Volunteer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("integer")
                        .HasColumnName("years_of_experience");

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "SearchForPets.Domain.Entities.VolunteerContext.Volunteer.Volunteer.FullName#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Firstname")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("last_name");

                            b1.Property<string>("SecondName")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("second_name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Phone", "SearchForPets.Domain.Entities.VolunteerContext.Volunteer.Volunteer.Phone#PhoneNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(13)
                                .HasColumnType("character varying(13)")
                                .HasColumnName("phone");
                        });

                    b.HasKey("Id")
                        .HasName("pk_volunteers");

                    b.ToTable("volunteers", (string)null);
                });

            modelBuilder.Entity("SearchForPets.Domain.Entities.SpeciesContext.BreedEntity.Breed", b =>
                {
                    b.HasOne("SearchForPets.Domain.Entities.SpeciesContext.SpeciesEntity.Specie", null)
                        .WithMany("Breeds")
                        .HasForeignKey("SpecieId")
                        .HasConstraintName("fk_breed_specie_specie_id");
                });

            modelBuilder.Entity("SearchForPets.Domain.Entities.VolunteerContext.PetEntity.Pet", b =>
                {
                    b.HasOne("SearchForPets.Domain.Entities.VolunteerContext.Volunteer.Volunteer", null)
                        .WithMany("Pets")
                        .HasForeignKey("VolunteerId")
                        .HasConstraintName("fk_pets_volunteers_volunteer_id");

                    b.OwnsOne("SearchForPets.Domain.Entities.Common.RequisiteDetails", "DetailsForHelp", b1 =>
                        {
                            b1.Property<Guid>("PetId")
                                .HasColumnType("uuid");

                            b1.HasKey("PetId")
                                .HasName("pk_pets");

                            b1.ToTable("pets");

                            b1.ToJson("requisites");

                            b1.WithOwner()
                                .HasForeignKey("PetId")
                                .HasConstraintName("fk_pets_pets_pet_id");

                            b1.OwnsMany("SearchForPets.Domain.Entities.Common.Requisite", "Requisites", b2 =>
                                {
                                    b2.Property<Guid>("RequisiteDetailsPetId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(500)
                                        .HasColumnType("character varying(500)");

                                    b2.Property<string>("Title")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)");

                                    b2.HasKey("RequisiteDetailsPetId", "Id");

                                    b2.ToTable("pets");

                                    b2.ToJson("requisites");

                                    b2.WithOwner()
                                        .HasForeignKey("RequisiteDetailsPetId")
                                        .HasConstraintName("fk_pets_pets_requisite_details_pet_id");
                                });

                            b1.Navigation("Requisites");
                        });

                    b.OwnsOne("SearchForPets.Domain.Entities.VolunteerContext.PetEntity.PhotoDetails", "PhotosDetails", b1 =>
                        {
                            b1.Property<Guid>("PetId")
                                .HasColumnType("uuid");

                            b1.HasKey("PetId");

                            b1.ToTable("pets");

                            b1.ToJson("pet_photos");

                            b1.WithOwner()
                                .HasForeignKey("PetId")
                                .HasConstraintName("fk_pets_pets_id");

                            b1.OwnsMany("SearchForPets.Domain.Entities.VolunteerContext.PetEntity.PetPhoto", "PetPhotos", b2 =>
                                {
                                    b2.Property<Guid>("PhotoDetailsPetId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<bool>("IsMain")
                                        .HasColumnType("boolean");

                                    b2.Property<string>("Path")
                                        .IsRequired()
                                        .HasMaxLength(500)
                                        .HasColumnType("character varying(500)");

                                    b2.HasKey("PhotoDetailsPetId", "Id");

                                    b2.ToTable("pets");

                                    b2.ToJson("pet_photos");

                                    b2.WithOwner()
                                        .HasForeignKey("PhotoDetailsPetId")
                                        .HasConstraintName("fk_pets_pets_photo_details_pet_id");
                                });

                            b1.Navigation("PetPhotos");
                        });

                    b.Navigation("DetailsForHelp");

                    b.Navigation("PhotosDetails");
                });

            modelBuilder.Entity("SearchForPets.Domain.Entities.VolunteerContext.Volunteer.Volunteer", b =>
                {
                    b.OwnsOne("SearchForPets.Domain.Entities.Common.RequisiteDetails", "Requisites", b1 =>
                        {
                            b1.Property<Guid>("VolunteerId")
                                .HasColumnType("uuid");

                            b1.HasKey("VolunteerId");

                            b1.ToTable("volunteers");

                            b1.ToJson("requisites");

                            b1.WithOwner()
                                .HasForeignKey("VolunteerId")
                                .HasConstraintName("fk_volunteers_volunteers_id");

                            b1.OwnsMany("SearchForPets.Domain.Entities.Common.Requisite", "Requisites", b2 =>
                                {
                                    b2.Property<Guid>("RequisiteDetailsVolunteerId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(500)
                                        .HasColumnType("character varying(500)");

                                    b2.Property<string>("Title")
                                        .IsRequired()
                                        .HasMaxLength(30)
                                        .HasColumnType("character varying(30)");

                                    b2.HasKey("RequisiteDetailsVolunteerId", "Id");

                                    b2.ToTable("volunteers");

                                    b2.ToJson("requisites");

                                    b2.WithOwner()
                                        .HasForeignKey("RequisiteDetailsVolunteerId")
                                        .HasConstraintName("fk_volunteers_volunteers_requisite_details_volunteer_id");
                                });

                            b1.Navigation("Requisites");
                        });

                    b.OwnsOne("SearchForPets.Domain.Entities.VolunteerContext.VolunteerEntity.SocialNetworkDetails", "SocialNetworks", b1 =>
                        {
                            b1.Property<Guid>("VolunteerId")
                                .HasColumnType("uuid");

                            b1.HasKey("VolunteerId");

                            b1.ToTable("volunteers");

                            b1.ToJson("social_networks");

                            b1.WithOwner()
                                .HasForeignKey("VolunteerId")
                                .HasConstraintName("fk_volunteers_volunteers_id");

                            b1.OwnsMany("SearchForPets.Domain.Entities.VolunteerContext.Volunteer.SocialNetwork", "SocialNetworks", b2 =>
                                {
                                    b2.Property<Guid>("SocialNetworkDetailsVolunteerId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Title")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)");

                                    b2.Property<string>("Url")
                                        .IsRequired()
                                        .HasMaxLength(500)
                                        .HasColumnType("character varying(500)");

                                    b2.HasKey("SocialNetworkDetailsVolunteerId", "Id");

                                    b2.ToTable("volunteers");

                                    b2.ToJson("social_networks");

                                    b2.WithOwner()
                                        .HasForeignKey("SocialNetworkDetailsVolunteerId")
                                        .HasConstraintName("fk_volunteers_volunteers_social_network_details_volunteer_id");
                                });

                            b1.Navigation("SocialNetworks");
                        });

                    b.Navigation("Requisites");

                    b.Navigation("SocialNetworks");
                });

            modelBuilder.Entity("SearchForPets.Domain.Entities.SpeciesContext.SpeciesEntity.Specie", b =>
                {
                    b.Navigation("Breeds");
                });

            modelBuilder.Entity("SearchForPets.Domain.Entities.VolunteerContext.Volunteer.Volunteer", b =>
                {
                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
