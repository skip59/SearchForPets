// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SearchForPets.Infrastructure.Postgres.Context;

#nullable disable

namespace SearchForPets.Infrastructure.Postgres.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PetVolunteer", b =>
                {
                    b.Property<Guid>("PetsId")
                        .HasColumnType("uuid")
                        .HasColumnName("pets_id");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uuid")
                        .HasColumnName("volunteer_id");

                    b.HasKey("PetsId", "VolunteerId")
                        .HasName("pk_pet_volunteer");

                    b.HasIndex("VolunteerId")
                        .HasDatabaseName("ix_pet_volunteer_volunteer_id");

                    b.ToTable("pet_volunteer", (string)null);
                });

            modelBuilder.Entity("SearchForPets.Domain.Entities.Common.PetPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.HasKey("Id")
                        .HasName("pk_pet_photo");

                    b.HasIndex("PetId")
                        .HasDatabaseName("ix_pet_photo_pet_id");

                    b.ToTable("pet_photo", (string)null);
                });

            modelBuilder.Entity("SearchForPets.Domain.Entities.Common.Requisites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid?>("VolunteerId")
                        .HasColumnType("uuid")
                        .HasColumnName("volunteer_id");

                    b.HasKey("Id")
                        .HasName("pk_requisites");

                    b.HasIndex("PetId")
                        .HasDatabaseName("ix_requisites_pet_id");

                    b.HasIndex("VolunteerId")
                        .HasDatabaseName("ix_requisites_volunteer_id");

                    b.ToTable("requisites", (string)null);
                });

            modelBuilder.Entity("SearchForPets.Domain.Entities.Common.SocialNetwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_social_network");

                    b.ToTable("social_network", (string)null);
                });

            modelBuilder.Entity("SearchForPets.Domain.Entities.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("address");

                    b.Property<string>("AnimalType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("animal_type");

                    b.Property<DateTime>("AtCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("at_created");

                    b.Property<DateOnly>("BirthDay")
                        .HasColumnType("date")
                        .HasColumnName("birth_day");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("breed");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("color");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<double>("Growth")
                        .HasColumnType("double precision")
                        .HasColumnName("growth");

                    b.Property<string>("HealthAbout")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("health_about");

                    b.Property<bool>("IsCastrated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_castrated");

                    b.Property<bool>("IsVaccinated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_vaccinated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("phone");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_pet");

                    b.ToTable("pet", (string)null);
                });

            modelBuilder.Entity("SearchForPets.Domain.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("full_name");

                    b.Property<int>("NumberOfPetAbleHome")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_pet_able_home");

                    b.Property<int>("NumberOfPetBeingTreated")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_pet_being_treated");

                    b.Property<int>("NumberOfPetLookingHome")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_pet_looking_home");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("phone");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("integer")
                        .HasColumnName("years_of_experience");

                    b.HasKey("Id")
                        .HasName("pk_volunteer");

                    b.ToTable("volunteer", (string)null);
                });

            modelBuilder.Entity("SocialNetworkVolunteer", b =>
                {
                    b.Property<Guid>("SocialNetworksId")
                        .HasColumnType("uuid")
                        .HasColumnName("social_networks_id");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uuid")
                        .HasColumnName("volunteer_id");

                    b.HasKey("SocialNetworksId", "VolunteerId")
                        .HasName("pk_social_network_volunteer");

                    b.HasIndex("VolunteerId")
                        .HasDatabaseName("ix_social_network_volunteer_volunteer_id");

                    b.ToTable("social_network_volunteer", (string)null);
                });

            modelBuilder.Entity("PetVolunteer", b =>
                {
                    b.HasOne("SearchForPets.Domain.Entities.Pet", null)
                        .WithMany()
                        .HasForeignKey("PetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pet_volunteer_pet_pets_id");

                    b.HasOne("SearchForPets.Domain.Entities.Volunteer", null)
                        .WithMany()
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pet_volunteer_volunteer_volunteer_id");
                });

            modelBuilder.Entity("SearchForPets.Domain.Entities.Common.PetPhoto", b =>
                {
                    b.HasOne("SearchForPets.Domain.Entities.Pet", null)
                        .WithMany("PetPhotos")
                        .HasForeignKey("PetId")
                        .HasConstraintName("fk_pet_photo_pet_pet_id");
                });

            modelBuilder.Entity("SearchForPets.Domain.Entities.Common.Requisites", b =>
                {
                    b.HasOne("SearchForPets.Domain.Entities.Pet", null)
                        .WithMany("DetailsForHelp")
                        .HasForeignKey("PetId")
                        .HasConstraintName("fk_requisites_pet_pet_id");

                    b.HasOne("SearchForPets.Domain.Entities.Volunteer", null)
                        .WithMany("Requisites")
                        .HasForeignKey("VolunteerId")
                        .HasConstraintName("fk_requisites_volunteer_volunteer_id");
                });

            modelBuilder.Entity("SocialNetworkVolunteer", b =>
                {
                    b.HasOne("SearchForPets.Domain.Entities.Common.SocialNetwork", null)
                        .WithMany()
                        .HasForeignKey("SocialNetworksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_social_network_volunteer_social_network_social_networks_id");

                    b.HasOne("SearchForPets.Domain.Entities.Volunteer", null)
                        .WithMany()
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_social_network_volunteer_volunteer_volunteer_id");
                });

            modelBuilder.Entity("SearchForPets.Domain.Entities.Pet", b =>
                {
                    b.Navigation("DetailsForHelp");

                    b.Navigation("PetPhotos");
                });

            modelBuilder.Entity("SearchForPets.Domain.Entities.Volunteer", b =>
                {
                    b.Navigation("Requisites");
                });
#pragma warning restore 612, 618
        }
    }
}
